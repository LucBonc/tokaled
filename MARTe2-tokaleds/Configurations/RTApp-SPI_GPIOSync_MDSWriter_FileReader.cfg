+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 8000
}

+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class =HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class =HttpDirectoryResource
        BaseDir = "/home/pi/MARTe2-F4E/MARTe2_armv8/Resources/HTTP/"
    }    
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOSTATE1 = {
            Class = Message
            Destination = StateMachine
            Function = GOTOSTATE1
            Mode = ExpectsReply
        }
        +GOTOSTATE2 = {
            Class = Message
            Destination = StateMachine
            Function = GOTOSTATE2
            Mode = ExpectsReply
        }
        +RESET = {
            Class = Message
            Destination = StateMachine
            Function = RESET 
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8040
    WebRoot = WebRoot
    Timeout = 0
 //   IsTextMode=0 
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 4
    MinNumberOfThreads = 1
    CPUMask=0x3
}



+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
	 +START = {
            Class = StateMachineEvent
            NextState = "STATE1"
            NextStateError = "ERROR"
            Timeout = 0
	    +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Function = "Start"
                Mode = ExpectsReply
            }   

            +ChangeToState1Msg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State1
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +STATE1 = {
        Class = ReferenceContainer
        +GOTOSTATE2 = {
            Class = StateMachineEvent
            NextState = "STATE2"
            NextStateError = "ERROR"
            Timeout = 0
            /*+SetStatusPV = {
        		Class = Message
        		Destination = "OPCUA_CA.PV_STATUS2"
        		Function = OPCUAWrite
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 1
        		}
            }         */  
	    +OpenTreeMsg = {
        		Class = Message
        		Destination = "TestApp.Data.MDSWriter"
        		Function = OpenTree
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = -1
        		}
        	}
            +PrepareChangeToState2Msg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State2
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +ERROR = {
            Class = StateMachineEvent
            NextState = "ERROR"
            NextStateError = "ERROR"
        }
    }
    +STATE2 = {
        Class = ReferenceContainer
        +GOTOSTATE1 = {
            Class = StateMachineEvent
            NextState = "STATE1"
            NextStateError = "ERROR"
            Timeout = 0
	    /* +SetStatusPV = {
        		Class = Message
        		Destination = "OPCUA_CA.PV_STATUS2"
        		Function = OPCUAWrite
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 0
        		}
            } */          
	   +MessageFlush = {
        		Class = Message
        		Destination = "TestApp.Data.MDSWriter"
        		Function = FlushSegments
        		Mode = ExpectsReply
        	}
            +PrepareChangeToState1Msg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State1
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            
        }
        +ERROR = {
            Class = StateMachineEvent
            NextState = "ERROR"
            NextStateError = "ERROR"
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = StateError
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "STATE1"
            NextStateError = "STATE1"
            Timeout = 0
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareChangeToState1Msg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State1
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
}



$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer

	 +GAMTimerLinux = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = TimerLinux
                    Type = uint32
                }
                Time = {
                    Frequency = 1
                    DataSource = TimerLinux
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter1 = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                Time2 = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
            }
        }



        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
               	 Time = {
                    Frequency = 250.00
                    DataSource = SPI
                    Type = uint32
                }
		 Counter = {
                    DataSource = SPI
                    Type = uint32
                }
 		CounterArduino = {
                    DataSource = SPI
                    Type = int32
                }
               	 TimeArduino = {
                    DataSource = SPI
                    Type = int32
                }
		
               
		execTimeArduino = {
                    DataSource = SPI
                    Type = int32
                }

		SIG1 = {
                    DataSource = SPI
                    Type = uint16
                }                
                SIG3 = {
                    DataSource =  SPI
                    Type = uint16
                }    
		SIG5 = {
                    DataSource = SPI
                    Type = uint16
                }                
                SIG6 = {
                    DataSource =  SPI
                    Type = uint16
                }      
  		SIG7 = {
                    DataSource = SPI
                    Type = uint16
                }                
                SIG8 = {
                    DataSource =  SPI
                    Type = uint16
                }    
		SIG9 = {
                    DataSource = SPI
                    Type = uint16
                }                
                SIG10 = {
                    DataSource =  SPI
                    Type = uint16
                }    
	       DUMMY = {
                    DataSource =  SPI
                    Type = uint32
                }    
            }
            OutputSignals = {
                         
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }  
		Counter = {
                    DataSource = DDB1
                    Type = uint32
                }              	
	         CounterArduino = {
                    DataSource = DDB1
                    Type = int32
                }
                      	
		 TimeArduino = {
                    
                    DataSource = DDB1
                    Type = int32
                }
		
		execTimeArduino = {
                    DataSource = DDB1
                    Type = int32
                }

		SIG1 = {
                    DataSource = DDB1
                    Type = uint16
                }                
                SIG3 = {
                    DataSource =  DDB1
                    Type = uint16
                }    
		SIG5 = {
                    DataSource = DDB1
                    Type = uint16
                }                
                SIG6 = {
                    DataSource =  DDB1
                    Type = uint16
                }      
  		SIG7 = {
                    DataSource = DDB1
                    Type = uint16
                }                
                SIG8 = {
                    DataSource =  DDB1
                    Type = uint16
                }    
		SIG9 = {
                    DataSource = DDB1
                    Type = uint16
                }                
                SIG10 = {
                    DataSource =  DDB1
                    Type = uint16
                }  
   		DUMMY = {
                    DataSource =  DDB1
                    Type = uint32
                }           
	   }
        }
 	+DataGAM={
            Class = IOGAM            
             InputSignals = {
               
                SimTime = {
                    DataSource =  FileReader
                    Type = float32
                }
                IPL = {
                    DataSource =  FileReader
                    Type = int32
                }
                MAG = {
                    DataSource =  FileReader
                    Type = int32
                }
                ALT = {
                    DataSource =  FileReader
                    Type = int32
                }
		ALV = {
                    DataSource =  FileReader
                    Type = int32
                }


		
            }
            OutputSignals = {
                SimTime = {
                    DataSource =  DDB1
                    Type = float32
                }
                IPL = {
                    DataSource =  DDB1
                    Type = int32
                }
                MAG = {
                    DataSource =  DDB1
                    Type = int32
                }
                ALT = {
                    DataSource =  DDB1
                    Type = int32
                }
                ALV = {
                    DataSource =  DDB1
                    Type = int32
                }

            }

            
        }
	+SPIGAM={
            Class = IOGAM            
            InputSignals = {
                IPL = {
                    DataSource = DDB1
                    Type = int32
                }
		MAG = {
                    DataSource = DDB1
                    Type = int32
                }
		ALT = {
                    DataSource = DDB1
                    Type = int32
                }
		ALV = {
                    DataSource = DDB1
                    Type = int32
                }
	    } 
            OutputSignals = {
                IPL = {
                    DataSource = SPI
                    Type = int32
                }
                MAG = {
                    DataSource = SPI
                    Type = int32
                }
                ALT = {
                    DataSource = SPI
                    Type = int32
                }
                ALV = {
                    DataSource = SPI
                    Type = int32
                }
		}
	}
      
        +GAMDisplay = {
            Class = IOGAM            
            InputSignals = {
		          
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }  
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                State2_Thread1_CycleTime = {
                    Alias = State2.Thread1_CycleTime
                    DataSource = Timings
                    Type = uint32
                }
                GAMTimer_ReadTime = {
                    DataSource = Timings
                    Type = uint32
                }
                GAMTimer_ExecTime = {
                    DataSource = Timings
                    Type = uint32
                }
                GAMTimer_WriteTime = {
                    DataSource = Timings
                    Type = uint32
                }
         /*       SPIGAM_ReadTime = {
                    DataSource = Timings
                    Type = uint32
                }
                SPIGAM_ExecTime = {
                    DataSource = Timings
                    Type = uint32
                }
                SPIGAM_WriteTime = {
                    DataSource = Timings
                    Type = uint32
                }*/
		TimeArduino = {
                    
                    DataSource = DDB1
                    Type = int32
                }
		 CounterArduino = {
                    DataSource = DDB1
                    Type = int32
                }
               
		/*execTimeArduino = {
                    DataSource = DDB1
                    Type = int32
                }*/

		SIG1 = {
                    DataSource = DDB1
                    Type = uint16
                }

		SIG3 = {
                    DataSource = DDB1
                    Type = uint16
                }                
		SIG5 = {
                    DataSource = DDB1
                    Type = uint16
                }
                SIG6 = {
                    DataSource =  DDB1
                    Type = uint16
                }
                SIG7 = {
                    DataSource = DDB1
                    Type = uint16
                }
                SIG8 = {
                    DataSource =  DDB1
                    Type = uint16
                }
                SIG9 = {
                    DataSource = DDB1
                    Type = uint16
                }
                SIG10 = {
                    DataSource =  DDB1
                    Type = uint16
                }
                IPL = {
                    DataSource = DDB1
                    Type = int32
                }
                MAG = {
                    DataSource = DDB1
                    Type = int32
                }
                ALT = {
                    DataSource = DDB1
                    Type = int32
                }
                ALV = {
                    DataSource = DDB1
                    Type = int32
                }

                
            } 
            OutputSignals = {
          
                Time = {
                    DataSource = MDSWriter
                    Type = uint32
                }  
                Counter = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                State1_Thread1_CycleTime = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                GAMTimer_ReadTime = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                GAMTimer_ExecTime = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                GAMTimer_WriteTime = {
                    DataSource = MDSWriter
                    Type = uint32
                }
         /*       SPIGAM_ReadTime = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                SPIGAM_ExecTime = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                SPIGAM_WriteTime = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }*/
		TimeArduino = {
                    
                    DataSource = MDSWriter
                    Type = int32
                }
		 CounterArduino = {
                    DataSource = MDSWriter
                    Type = int32
                }
               
		/*execTimeArduino = {
                    DataSource = MDSWriter
                    Type = int32
                }*/

		SIG1 = {
                    DataSource = MDSWriter
                    Type = uint16
                }
		SIG3 = {
                    DataSource = MDSWriter
                    Type = uint16
                }                   
		SIG5 = {
                    DataSource = MDSWriter
                    Type = uint16
                }
		SIG6 = {
                    DataSource = MDSWriter
                    Type = uint16
                }
		SIG7 = {
                    DataSource = MDSWriter
                    Type = uint16
                }
		SIG8 = {
                    DataSource = MDSWriter
                    Type = uint16
                }
		SIG9 = {
                    DataSource = MDSWriter
                    Type = uint16
                }
		SIG10 = {
                    DataSource = MDSWriter
                    Type = uint16
                }
                IPL = {
                    DataSource = MDSWriter
                    Type = int32
                }
                MAG = {
                    DataSource = MDSWriter
                    Type = int32
                }
                ALT = {
                    DataSource = MDSWriter
                    Type = int32
                }
                ALV = {
                    DataSource = MDSWriter
                    Type = int32
                }




            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
       	}        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +TimerLinux = {
            Class = LinuxTimer
            SleepNature = "Default"
	    CPUMask=0x4
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }
        +SPI = {
            Class = SPIDataSource
	    ClockPin=23
	    Speed=120000
	}	   
	+FileReader = {
		    Class = FileDataSource::FileReader
		    Filename = "data2.txt"
		    FileFormat = "csv"
		    CSVSeparator = ","
		    Interpolate = "no"
		    EOF = "Rewind"
		}
	   +MDSWriter = {
                    Class = MDSWriter
                    NumberOfBuffers = 100000 //Compulsory. Number of buffers in the circular buffer defined above. Each buffer is capable of holding a copy of all the DataSourceI signals.
                    CPUMask = 2 //Compulsory. Affinity assigned to the threads responsible for asynchronously flush data into the MDSplus database.
                    StackSize = 10000000 //Compulsory. Stack size of the thread above.
                    TreeName = "tokaleds" //Compulsory. Name of the MDSplus tree.
                  //  PulseNumber = 0 //0 //Optional. If -1 a new pulse will be created and the MDSplus pulse number incremented.
                    StoreOnTrigger = 0 //Compulsory. If 0 all the data in the circular buffer is continuously stored. If 1 data is stored when the Trigger signal is 1 (see below).
                    EventName = "updatejScope" //Compulsory. Event sent to jScope when TimeRefresh seconds have elapsed.
                    TimeRefresh = 5 //Compulsory. An event with the name set in the property EventName is sent to jScope when TimeRefresh seconds have elapsed.
                    Signals = {
                        


			Time = { //As many as required.
                            NodeName = "PERFORMANCE.TIME" //Compulsory. MDSplus node name
                            Period = 0.004//Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
			    //Type=uint32
                        }
                         Counter= { //As many as required.
                            NodeName = "PERFORMANCE.COUNTER" //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
			GAMTimer_ReadTime  = { //As many as required.
                            NodeName = "PERFORMANCE.TIMER_R_TIME" //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
			GAMTimer_WriteTime  = { //As many as required.
                            NodeName = "PERFORMANCE.TIMER_W_TIME" //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
			GAMTimer_ExecTime  = { //As many as required.
                            NodeName = "PERFORMANCE.TIMER_E_TIME" //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        State1_Thread1_CycleTime = { //As many as required.
                            NodeName = "PERFORMANCE.CYCLETIME" //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        CounterArduino = { //As many as required.
                            NodeName = "PERFORMANCE.ARDUINOCOUNT"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        TimeArduino = { //As many as required.
                            NodeName = "PERFORMANCE.ARDUINOTIME"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        SIG1 = { //As many as required.
                            NodeName = "ADC.A0"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        SIG3 = { //As many as required.
                            NodeName = "ADC.A1"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        SIG5 = { //As many as required.
                            NodeName = "ADC.A2"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        SIG6 = { //As many as required.
                            NodeName = "ADC.A3"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        SIG7 = { //As many as required.
                            NodeName = "ADC.A4"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        SIG8 = { //As many as required.
                            NodeName = "ADC.A5"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        SIG9 = { //As many as required.
                            NodeName = "ADC.A6"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        SIG10 = { //As many as required.
                            NodeName = "ADC.A7"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                        }
                        IPL = {
                            NodeName = "REFERENCE.IPL"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                	}
                	MAG = {
                            NodeName = "REFERENCE.MAG"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                	}
                	ALT = {
                           NodeName = "REFERENCE.ALT"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500

			}
                	ALV = {
                           NodeName = "REFERENCE.ALVF"  //Compulsory. MDSplus node name
                            Period = 0.004 //Compulsory. Period between signal samples.
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 1500
                	}


                    }
                }
 		

     
    }
    +States = {
        Class = ReferenceContainer
        +State1 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
		    StackSize = 10000000
                    CPUs = 0x4
                    Functions = {GAMTimerLinux  }
                }
            }
        }        
        +State2 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
		    StackSize = 10000000
                    CPUs = 0x8
                    Functions = {GAMTimer DataGAM SPIGAM GAMDisplay }
                }
            }
        }        
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
